# -*- coding: utf-8 -*-
"""exercicio_2_A_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BRaYDthRlrFi_O-PrVump_FoVbS0lIUO
"""

#Atividade 2 letra A
import numpy as np
import matplotlib.pyplot as plt

#Função que gera o degrau para os sinais de x[n] e h[n]
def degrau(n0, sinal):
  u = []

  for i in range((0-n0), (31-n0)):
    u.append(1) if sinal == 1 else u.append(-1)
  
  return u

#Função que faz a soma entre dois sinais e analisando os deslocamentos
def junta_funcao(x, y, desloc1, desloc2):
  result = []

  j = 0
  k = 0
  for i in range(0, 31):
    if i >= desloc1:
      if i >= desloc2:
        result.append(x[j] + y[k])
        j += 1
        k += 1
      else:
        result.append(x[j])
        j += 1
    else:
      result.append(0)

  return result

#Função que cria o sinal h determinado pelo exercicio.
def sinal_h(x):
  h = []

  for i in range(0, 31):
    result = np.sin(((2 * np.pi)/8) * i) * x[i]
    h.append(result)

  return h

#Função mains onde faz todas as criações dos vetores de tempo, dos sinais e 
#o print dos graficos.
def main():
  n0, n1 = 0, 8

  n_0 = np.linspace(0-n0, 30-n0, 31)
  n_1 = np.linspace(0-n1, 30-n1, 31)
  n_y = np.linspace(0, 60, 61)

  u = degrau(n0, 1)
  u_8 = degrau(n1, -1)

  x = junta_funcao(u, u_8, n0, n1)

  h = sinal_h(x)

  y = np.convolve(x, h)

  plt.figure(figsize=(12, 6))
  plt.stem(n_0, x, use_line_collection = True)
  plt.xlabel("[n]")
  plt.ylabel("x[n]")
  plt.title('Sinal x[n]')
  plt.show()

  plt.figure(figsize=(12, 6))
  plt.stem(n_0, h, use_line_collection = True)
  plt.xlabel("[n]")
  plt.ylabel("h[n]")
  plt.title('Sinal h[n]')
  plt.show()

  plt.figure(figsize=(12, 6))
  plt.stem(n_y, y, use_line_collection = True)
  plt.xlabel("[n]")
  plt.ylabel("y[n]")
  plt.title('Sinal y[n]')
  plt.show()

if __name__ == "__main__":
  main()

