# -*- coding: utf-8 -*-
"""exercicio_2_A_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u4-Lwc12-k7XiPNEIfhz5Ft9D4cLSY1g
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy import pi
from numpy.fft import fft, ifft, fftfreq, fftshift
import scipy as sc
from scipy import signal

def square(wt, duty = 0.5):
    sq = sc.signal.square(wt, duty=duty )
    return sq

# definindo o sinal continuo periódico
fs = 1000        # freq. do sinal periódico
w0 = 2*pi*fs    # frequencia angular
Ts = 1/fs       # período fundamental do sinal
Tam = 1/(100*fs)   	# período de amostragem 100 vezes menor que o período do sinal

Np = 30          # quantidade de periodos no vetor do sinal
# Criando o vetor de tempo,5 períodos, e intervalo de Tam
t = np.arange(0,Ts*Np,Tam)
# criando x(t)
s = 2.5*square(w0*t,duty = 0.50)

frand = np.random.rand(2)   # fase aleatoria para as variaveis do sinal ns(t)
Vfrq = (1+np.cos(200*t+(pi*frand[0]) ))*(100/2)
Vdc = (1+np.cos(200*t+(pi*frand[1])))*(5/2)
ns = Vdc + 2.5*np.cos(2*pi*Vfrq*t)

x = s + ns

plt.figure(figsize=(12, 8))
plt.plot(t, s)
plt.show()

plt.figure(figsize=(12, 8))
plt.plot(t, ns)
plt.show()

plt.figure(figsize=(12, 8))
plt.plot(t, x)
plt.show()


#criando o vetor de frequencia
w = fftfreq(len(t), d=(1/Ts)*Tam)

# calculando a FS dos sinais envolvidos
X = fft(x)/len(x)
S = fft(s)/len(x)
N = fft(ns)/len(x)

# calculando o modulo - magnitude do espectro
ModX = np.abs(X)
phaseX = np.angle(X)
ModS = np.abs(S)
phaseS = np.angle(S)
ModN = np.abs(N)

B = 0.001    # largura de banda
wo = 1
# Criando um filtro passa faixa
H = []
for i in w:
  if i > -1 and i < 1:
    H.append(0)
  else:
    H.append(1)


sinal_novo_3 = X * H

y = np.real(ifft(sinal_novo_3)*len(x))

plt.figure(figsize=(12, 8))
plt.plot(w, sinal_novo_3)
plt.show()

plt.figure(figsize=(12, 8))
plt.plot(t, y)
plt.show()


# plotando a magnitude dos sinais envolvidos
# plt.figure(figsize=(12, 8))
# plt.stem(w, ModS)
# plt.axis([-10, 10, -0.1, 4])
# plt.show()

# plt.figure(figsize=(12, 8))
# plt.stem(w, ModN)
# plt.axis([-5, 5, -0.1, 4])
# plt.show()

# plt.figure(figsize=(12, 8))
# plt.stem(w, ModX)
# plt.axis([-10, 10, -0.1, 4])
# plt.show()

