# -*- coding: utf-8 -*-
"""exercicio_6_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hMH0kO5IbhYABBGnRHNjsAh2g8Q-HhXr
"""

#Exercicio 6
import numpy as np
import matplotlib.pyplot as plt

#Função que cria o degrau com o deslocamento, se o sinal é positivo ou negativo
#e junto com o periodo de amostragem.
def sinal_u(n0, sinal, Ts):
  u = []

  for i in np.arange(-10, 20, Ts):
    if i >= n0:
      if sinal == 0:
        u.append(1)
      else:
        u.append(-1)
    else:
      u.append(0)
  
  return u

#Função que cria o sinal h(t) junto do sinal u(t) e o periodo de amostragem
def sinal_h(u, Ts):
  h = []

  j = 0
  for i in np.arange(-10, 20, Ts):
    h.append(np.exp(-i) * u[j])
    j += 1

  return h

#Função que faz a soma dos sinais x(t) e h(t) que leva em consideração os
#deslocamentos e o periodo de amostragem
def junta_funcao(x, y, desloc1, desloc2, Ts):
  result = []

  j = 0
  k = 0
  for i in np.arange(-10, 20, Ts):
    if i >= desloc1:
      if i >= desloc2:
        result.append(x[j] + y[k])
        j += 1
        k += 1
      else:
        result.append(x[j])
        j += 1
    else:
      result.append(x[j])
      j += 1
      k += 1

  return result

#Função main que faz a criação dos t's, dos sinais x(t) e h(t) e por fim a 
#resposta a convolução junto com os graficos.
def main():
  Ts = 0.0001
  
  t = np.arange(-10, 20, Ts)
  t_2 = np.arange(-10, 20, Ts)
  t_3 = np.arange(-20, 39.9999, Ts)

  u = sinal_u(0, 0, Ts)
  u_1 = sinal_u(1, 1, Ts)

  x = junta_funcao(u, u_1, 0, 1, Ts)
  h = sinal_h(u, Ts)

  y = np.convolve(h, x) * Ts

  plt.figure(figsize=(12, 6))
  plt.plot(t_2, x)
  plt.xlabel("(t)")
  plt.ylabel("x(t)")
  plt.title('Sinal x(t)')
  plt.show()

  plt.figure(figsize=(12, 6))
  plt.plot(t_2, h)
  plt.xlabel("(t)")
  plt.ylabel("h(t)")
  plt.title('Sinal h(t)')
  plt.show()

  plt.figure(figsize=(12, 6))
  plt.plot(t_3, y)
  plt.axis([-0.01, 5.01, -0.05, 1])
  plt.xlabel("(t)")
  plt.ylabel("y(t)")
  plt.title('Sinal y(t)')
  plt.show()

if __name__ == "__main__":
  main()

