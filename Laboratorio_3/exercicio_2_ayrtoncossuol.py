# -*- coding: utf-8 -*-
"""exercicio_2_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hMH0kO5IbhYABBGnRHNjsAh2g8Q-HhXr
"""

#Atividade 2
import numpy as np
import matplotlib.pyplot as plt

#Função para criar o sinal x[n] proposto no exercicio
def sinal_x():
  x = []

  for i in range(-10, 101):
    x.append(1) if i >= 0 else x.append(0)
  
  return x

#Função para criar o sinal h[n] proposto no exercicio
def sinal_h(x):
  h = []

  j = 0
  for i in range(-10, 101):
    mult = ((3/4)**i) * x[j]
    j += 1
    h.append(mult)
  
  return h

#Função main onde faz a criação dos n's para a plotagem dos graficos e a 
#criação dos sinais e a convolução junto com o plot dos graficos.
def main():
  n = np.linspace(-10, 100, 111)
  n2 = np.linspace(-20, 200, 221)
  
  x = sinal_x()
  h = sinal_h(x)
 
  y = np.convolve(x, h)

  plt.figure(figsize=(12, 6))
  plt.stem(n, x, use_line_collection = True)
  plt.xlabel("[n]")
  plt.ylabel("x[n]")
  plt.title('Sinal x[n]')
  plt.show()

  plt.figure(figsize=(12, 6))
  plt.stem(n, h, use_line_collection = True)
  plt.xlabel("[n]")
  plt.ylabel("h[n]")
  plt.title('Sinal h[n]')
  plt.show()

  plt.figure(figsize=(12, 6))
  plt.stem(n2, y, use_line_collection = True)
  plt.xlabel("[n]")
  plt.ylabel("y[n]")
  plt.title('Sinal y[n]')
  plt.show()


if __name__ == "__main__":
  main()

