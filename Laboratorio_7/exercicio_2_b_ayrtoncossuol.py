# -*- coding: utf-8 -*-
"""exercicio_2_B_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LOftT3KOxUJZ2Ahf6XJNiQLxUcul39ZJ
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy.fft import fft, ifft, fftfreq, fftshift

def degrau(t, t0):
  degrau = np.arange(t[0], t[-1] + t[1]-t[0], t[1]-t[0])
  
  for i in range(len(degrau)):
    if degrau[i] >= t0:
      degrau[i] = 1
    else:
      degrau[i] = 0
  
  return degrau

def main():
  w_amp = 300 
  tam = (2 * np.pi) / w_amp
  t = np.arange(0, 10 + tam, tam)

  # Criando o sinal
  x = np.exp(-t) * degrau(t, 0)

  # N - tamanho da DTFS
  N = np.power(2, 12)

  # Calculando a FT
  X = (tam * N) * fft(x, N) / N

  # Criando o vetor de frequencia
  w = fftfreq(len(X), d=(tam)) * (2 * np.pi)

  # Os indices de frequencia são mudados de 0 a N-1 para -N/2 + 1 a N/2
  # posicionando a freq. zero no meio do gráfico
  wd, Xd = fftshift(w), fftshift(X)

  # Calculando o modulo e a fase
  ModX, phasX = np.abs(Xd), np.angle(Xd)

  fig, ax = plt.subplots(3, 1)
  # Representação do sinal no tempo
  ax[0].plot(t, x, linewidth=2, label="")
  ax[0].set_ylabel("Amplitude")
  ax[0].set_xlabel("t")
  ax[0].set_title('x(t)')
  ax[0].grid(True)

  # Representação do modulo da ft
  ax[1].plot(wd, ModX, linewidth=2, label="")
  ax[1].set_ylabel("Amplitude")
  ax[1].set_xlabel("rad/s")
  ax[1].set_xlim(-50, 50)
  ax[1].set_title('|Xa(e^jw)|')
  ax[1].grid(True)

  # Representação do angulo da ft
  ax[2].stem(wd, phasX, label="", use_line_collection=True)
  ax[2].set_ylabel("Amplitude")
  ax[2].set_xlabel("rad/s")
  ax[2].set_xlim(-10, 10)
  ax[2].set_title('arg(Xa(e^jw))')
  ax[2].grid(True)

  plt.tight_layout()
  plt.show()

if __name__ == '__main__':
  main()

