# -*- coding: utf-8 -*-
"""exercicio_2_D_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LOftT3KOxUJZ2Ahf6XJNiQLxUcul39ZJ
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy.fft import fft, ifft, fftfreq, fftshift

def impulso_trem(t, Tam):
  trem_impulso = np.arange(t[0], (t[-1] + t[1]-t[0]), t[1]-t[0])
  
  for i in range(len(trem_impulso)):
    if(t[i] % Tam != 0):
      trem_impulso[i] = 0
    else:
      trem_impulso[i] = 1
  
  return trem_impulso

def main():
  w = 1
  w_amp = 2 * w 
  tam = (2 * np.pi) / w_amp
  t = np.arange(-20, 20 + tam/np.pi, tam/np.pi)

  # Sinais
  x = impulso_trem(t, 10)

  # N - tamanho da DTFS
  N = np.power(2, 12)

  # calculando a FT
  X = (tam * N) * fft(x, N) / N

  #criando o vetor de frequencia
  w = fftfreq(len(X), d=(tam)) * (2 * np.pi)

  # posicionando a freq. zero no meio do gr√°fico
  wd, Xd = fftshift(w), fftshift(X)

  # calculando o modulo e a fase
  ModX, phasX = np.abs(Xd), np.angle(Xd)

  fig, ax = plt.subplots(3,1)
  # Representando um sinal no tempo
  ax[0].stem(t, x, 'c-', label="", use_line_collection=True)
  ax[0].set_ylabel("Amplitude")
  ax[0].set_xlabel("t")
  ax[0].set_title('x(t)')
  ax[0].grid(True)

  # Representando o modulo da fs
  ax[1].plot(wd, ModX, 'r-',linewidth=2, label="")
  ax[1].set_ylabel("Amplitude")
  ax[1].set_xlabel("rad/s")
  ax[1].set_title('|Xa(e^jw)|')
  ax[1].grid(True)

  # Representando a fase da fs
  ax[2].stem(wd, phasX, 'r-', label="", use_line_collection=True)
  ax[2].set_ylabel("Amplitude")
  ax[2].set_xlabel("rad/s")
  ax[2].set_title('angle(Xa(e^jw))')
  ax[2].grid(True)

  plt.tight_layout()
  plt.show()

if __name__ == '__main__':
  main()

