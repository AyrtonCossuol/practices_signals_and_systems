# -*- coding: utf-8 -*-
"""exercicio_1_A_AyrtonCossuol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LOftT3KOxUJZ2Ahf6XJNiQLxUcul39ZJ
"""

# Exercicio 1 - A
import numpy as np
import matplotlib.pyplot as plt
from numpy.fft import fft, ifft, fftfreq, fftshift

def rampa(t, to):
  rampa = np.arange(t[0], t[-1] + t[1]-t[0], t[1]-t[0])

  j = 0
  for i in range(len(rampa)):
    if(to > rampa[i]):
      rampa[i] = 0
    else:
      rampa[i] = j
      j = j + (t[1]-t[0])
  
  return rampa

def main():
  w_amp = 1000
  tam = (2 * np.pi) / w_amp
  t = np.arange(-10, 10 + tam, tam)

  x = 0.2 * (rampa(t, -5) - 2 * rampa(t, 0) + rampa(t, 5))

  # N - tamanho da DTFS
  N = np.power(2, 16)

  # calculando a FT
  X = ((tam * N) * fft(x, N)) / N

  #criando o vetor de frequencia
  w = fftfreq(len(X), d=(tam)) * (2 * np.pi)

  # Os indices de frequencia são mudados de 0 a N-1 para -N/2 + 1 a N/2
  # posicionando a freq. zero no meio do gráfico
  wd, Xd = fftshift(w), fftshift(X)

  # calculando o modulo - magnitude do espectro
  ModX = np.abs(Xd)

  fig, ax = plt.subplots()
  ax.plot(wd, ModX, linewidth=1, label="")
  ax.set_ylabel("Amplitude")
  ax.set_xlabel("rad/s")
  ax.set_xlim(-10, 10)
  ax.set_title('|X(e^jw)|')
  ax.grid(True)

  fig1, ax1 = plt.subplots()
  ax1.plot(t, x, linewidth=2, label="")
  ax1.set_ylabel("Amplitude")
  ax1.set_xlabel("t")
  ax1.set_title('x(t)')
  ax1.grid(True)

  plt.tight_layout()
  plt.show()

if __name__ == '__main__':
  main()

